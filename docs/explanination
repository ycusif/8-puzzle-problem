# üìú 8-Puzzle Problem - Algorithm Documentation

## üìå Introduction
The **8-Puzzle Problem** is a classic AI problem where the objective is to move numbered tiles in a 3√ó3 grid to reach a goal configuration using different search strategies.

## üéØ Goal State
```
[1, 0, 3]
[8, 2, 4]
[7, 6, 5]
```

## üöÄ Implemented Algorithms
This project implements **six search algorithms**:

### **1Ô∏è‚É£ Breadth-First Search (BFS)**
- **Type:** Uninformed Search
- **How it Works:**
  - Explores all possible moves **level by level**.
  - Uses a **queue (FIFO)** for node expansion.
  - **Guaranteed** to find the shortest path but **requires more memory**.
- **Example Execution:**
  ```
  Initial State:
  [2, 8, 3]
  [1, 4, 0]
  [7, 6, 5]
  
  Expanding Nodes:
  ‚Üí Move Blank Left
  ‚Üí Move Blank Up
  ‚Üí Move Blank Right
  
  Final Solution Found!
  ```

### **2Ô∏è‚É£ Depth-First Search (DFS)**
- **Type:** Uninformed Search
- **How it Works:**
  - Explores one path deeply before backtracking.
  - Uses a **stack (LIFO)**.
  - **Faster but may not find the shortest path**.
- **Example Execution:**
  ```
  Initial State:
  [2, 8, 3]
  [1, 4, 0]
  [7, 6, 5]
  
  Expanding Deep Nodes First:
  ‚Üí Move Blank Up
  ‚Üí Move Blank Left
  ‚Üí Backtracking
  ```

### **3Ô∏è‚É£ Uniform Cost Search (UCS)**
- **Type:** Uninformed Search
- **How it Works:**
  - Expands the **least-cost path first**.
  - Guarantees **finding the optimal solution**.
  - Uses a **priority queue**.
- **Example Execution:**
  ```
  Initial State:
  [2, 8, 3]
  [1, 4, 0]
  [7, 6, 5]
  
  Expanding Nodes Based on Cost:
  ‚Üí Move Blank Right (Cost 1)
  ‚Üí Move Blank Left (Cost 2)
  ‚Üí Move Blank Up (Cost 3)
  ```

### **4Ô∏è‚É£ Greedy Best-First Search**
- **Type:** Heuristic Search
- **How it Works:**
  - Chooses moves based on a **heuristic function (Manhattan Distance)**.
  - **Faster than BFS/UCS but may get stuck in suboptimal paths**.
- **Heuristic Calculation:**
  ```
  h(n) = Sum of Manhattan distances of all misplaced tiles
  ```

### **5Ô∏è‚É£ Hill Climbing**
- **Type:** Local Search Algorithm
- **How it Works:**
  - Moves to the **neighbor with the lowest heuristic cost**.
  - Can **get stuck in local optima** and may **fail to find the best solution**.

### **6Ô∏è‚É£ A* Search (A-Star)**
- **Type:** Heuristic Search
- **How it Works:**
  - Uses a combination of **cost (g) + heuristic (h)**.
  - Guarantees the **optimal solution if the heuristic is admissible**.
- **Formula Used:**
  ```
  f(n) = g(n) + h(n)
  ```

## üîç Complexity Comparison
| Algorithm  | Completeness | Optimality | Time Complexity | Space Complexity |
|------------|-------------|------------|----------------|----------------|
| BFS        | ‚úÖ Yes | ‚úÖ Yes (if unweighted) | O(V + E) | O(V) |
| DFS        | ‚ùå No  | ‚ùå No  | O(V + E) | O(V) |
| UCS        | ‚úÖ Yes | ‚úÖ Yes  | O(V + E) | O(V) |
| Greedy     | ‚ùå No  | ‚ùå No  | O(V + E) | O(V) |
| Hill Climbing | ‚ùå No | ‚ùå No | O(V + E) | O(V) |
| A* Search  | ‚úÖ Yes | ‚úÖ Yes (if heuristic is admissible) | O(V + E) | O(V) |

## üìú References
- **Artificial Intelligence: A Modern Approach** - Stuart Russell & Peter Norvig  
- **GeeksforGeeks: 8-Puzzle Problem Explanation**  
